src:
    main.go:
        package main

        import (
                "bufio"
                "flag"
                "fmt"
                "os"

                flachcards "github.com/epicnotgames/cli-flashcards/src/packages/flashcards"
                utils "github.com/epicnotgames/cli-flashcards/src/packages/utils"
        )

        func main() {
                //flach cuz naming clash
                flashcards := flachcards.GetFlashcards()
                scanner := bufio.NewScanner(os.Stdin)

                fileName := flag.String("file", "flashcards.json", "Specify the flashcards file name")
                flag.Parse()

                fmt.Println("Welcome to the Flashcard Quiz!")

                utils.ErrHandle(flachcards.LoadFlashcards(*fileName))

                for {
                        fmt.Print("Would you like to add a flashcard? (y/n): ")
                        scanner.Scan()
                        answer := scanner.Text()
                        if answer == "y" {
                                // Save flashcards to file after adding
                                utils.ErrHandle(flachcards.SaveFlashcards(*fileName))
                        } else if answer == "n" {
                                utils.ClearTerminal()
                                break
                        } else {
                                fmt.Println("Invalid input. Please enter 'y' or 'n'.")
                        }
                }

                shuffledFlashcards := flachcards.GetShuffledFlashcards(flashcards)

                flachcards.PrintFlashCards(flashcards, shuffledFlashcards, scanner)

                fmt.Println("Flashcard Quiz completed. Goodbye!")
        }

src/flashcards:
    get.go:
        package flachcards

        import (
                "math/rand"
                "time"

                "github.com/epicnotgames/cli-flashcards/src/packages/storage"
        )

        func GetFlashcards() map[string]storage.Flashcard {
                return storage.Flashcards
        }

        func GetShuffledFlashcards(flashcards map[string]storage.Flashcard) []string {
                keys := make([]string, 0, len(flashcards))
                for key := range flashcards {
                        keys = append(keys, key)
                }

                source := rand.NewSource(time.Now().UnixNano())
                rand := rand.New(source)
                rand.Shuffle(len(keys), func(i, j int) {
                        keys[i], keys[j] = keys[j], keys[i]
                })

                return keys
        }

    load.go:
        package flachcards

        import (
                "encoding/json"
                "fmt"
                "os"

                "github.com/epicnotgames/cli-flashcards/src/packages/storage"
        )

        // const flashcardsFile = "flashcards.json"

        func LoadFlashcards(fileName string) error {
                file, err := os.Open(fileName)
                if err != nil {
                        return err
                }
                defer file.Close()

                decoder := json.NewDecoder(file)
                if err := decoder.Decode(&storage.Flashcards); err != nil {
                        return err
                }
                fmt.Printf("Loading flashcards from %s\n", fileName)
                fmt.Println("Flashcards loaded successfully.")
                return nil
        }
    print.go:
        package flachcards

        import (
                "bufio"
                "fmt"

                "github.com/epicnotgames/cli-flashcards/src/packages/storage"
                "github.com/epicnotgames/cli-flashcards/src/packages/utils"
        )

        func PrintFlashCards(
                flashcards map[string]storage.Flashcard,
                shuffledFlashcards []string,
                scanner *bufio.Scanner,
        ) {
                for key, card := range flashcards {
                        fmt.Printf("%s\n", key)
                        fmt.Printf("Q: %s\n", card.Question)
                        scanner.Scan()
                        fmt.Printf("A: %s\n\n", card.Answer)
                        scanner.Scan()
                        utils.ClearTerminal()
                }
        }
    save.go:
        package flachcards

        import (
                "encoding/json"
                "fmt"
                "os"

                "github.com/epicnotgames/cli-flashcards/src/packages/storage"
        )

        //const flashcardsFile = "flashcards.json"

        func SaveFlashcards(fileName string) error {
                file, err := os.Create(fileName)
                if err != nil {
                        return err
                }
                defer file.Close()

                encoder := json.NewEncoder(file)
                if err := encoder.Encode(storage.Flashcards); err != nil {
                        return err
                }

                fmt.Println("Flashcards saved successfully.")
                return nil
        }

src/storage:
    flashcards.go:
        package storage

        type Flashcard struct {
                Question string `json:"Question"`
                Answer   string `json:"Answer"`
        }
    questions.go:
        package storage

        var Flashcards = map[string]Flashcard{}

src/utils:
    clear.go:
        package utils

        import (
                "os"
                "os/exec"
                "runtime"
        )

        func runCmd(
                name string,
                arg ...string,
        ) {
                cmd := exec.Command(name, arg...)
                cmd.Stdout = os.Stdout
                cmd.Run()
        }

        func ClearTerminal() {
                switch runtime.GOOS {
                case "linux":
                        runCmd("clear")
                case "windows":
                        runCmd("cmd", "/c", "cls")
                default:
                        runCmd("clear")
                }
        }

    err.go:
        package utils

        import (
                "fmt"
                "os"
        )

        func ErrHandle(err error) {
                if err != nil {
                        fmt.Println(err)
                        os.Exit(1)
                }
        }